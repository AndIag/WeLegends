apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion versions.compiledSdk
    buildToolsVersion "$versions.buildTools"
    defaultConfig {
        applicationId "com.andiag.welegends"
        minSdkVersion 19
        targetSdkVersion versions.compiledSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "HttpLoggingInterceptorLevel", "\"${getRetrofitLoggingLevel()}\""
            buildConfigField "String", "AndIagApi", "\"${getAndIagApi()}\""
            buildConfigField "String", "ApiKey", "\"${getApiKey()}\""
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "HttpLoggingInterceptorLevel", "NONE"
            buildConfigField "String", "AndIagApi", "\"${getAndIagApi()}\""
            buildConfigField "String", "ApiKey", "\"${getApiKey()}\""
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$versions.espresso", {
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    })
    androidTestCompile("com.android.support:support-annotations:$versions.supportLib", {
        force = true // Required to force version on runner:0.5
    })

    testCompile 'junit:junit:4.12'

    kapt "com.jakewharton:butterknife-compiler:$versions.butterknife"
    kapt "com.github.Raizlabs.DBFlow:dbflow-processor:$versions.dbflow"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile("com.android.support:design:$versions.supportLib", { force = true })
    compile("com.android.support:cardview-v7:$versions.supportLib", { force = true })
    compile("com.android.support:preference-v14:$versions.supportLib", { force = true })

    compile 'com.github.siyamed:android-shape-imageview:0.9.3@aar'
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.7.0'
    compile 'com.github.florent37:diagonallayout:1.0.3'
    compile('com.hariofspades.gradientartist:gradientartist:0.0.1', {
        exclude group: 'com.github.bumptech.glide', module: 'glide'
    })
    compile 'uk.co.chrisjenx:calligraphy:2.2.0'

    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile "com.jakewharton:butterknife:$versions.butterknife"

    // Async library for Kotlin
    compile 'org.jetbrains.anko:anko-sdk19:0.9.1'

    //Network access
    compile "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    compile 'com.squareup.okhttp3:logging-interceptor:3.5.0'
    compile 'com.github.pwittchen:reactivenetwork:0.7.0'

    //Database
    compile "com.github.Raizlabs.DBFlow:dbflow:$versions.dbflow"
    compile "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:$versions.dbflow@aar"

    compile 'com.github.iagocanalejas.andiag-mvp:commons:0.2.1'
}

kapt {
    generateStubs = true
}
repositories {
    mavenCentral()
}

def getRetrofitLoggingLevel() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    return properties.getProperty('HttpLoggingInterceptorLevel', "BODY")
}

def getAndIagApi() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    return properties.getProperty('AndIagApi', "http://andiag-prod.apigee.net/v1/test-welegends/")
}

def getApiKey() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    return properties.getProperty('ApiKey', "")
}